{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4f5d065a-051c-421f-9314-19fd5ca3e962",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: numpy in c:\\users\\maicol_pc\\anaconda3\\lib\\site-packages (1.26.4)\n",
      "Requirement already satisfied: pandas in c:\\users\\maicol_pc\\anaconda3\\lib\\site-packages (2.2.2)\n",
      "Requirement already satisfied: scikit-learn in c:\\users\\maicol_pc\\anaconda3\\lib\\site-packages (1.4.2)\n",
      "Requirement already satisfied: matplotlib in c:\\users\\maicol_pc\\anaconda3\\lib\\site-packages (3.8.4)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in c:\\users\\maicol_pc\\anaconda3\\lib\\site-packages (from pandas) (2.9.0.post0)\n",
      "Requirement already satisfied: pytz>=2020.1 in c:\\users\\maicol_pc\\anaconda3\\lib\\site-packages (from pandas) (2024.1)\n",
      "Requirement already satisfied: tzdata>=2022.7 in c:\\users\\maicol_pc\\anaconda3\\lib\\site-packages (from pandas) (2023.3)\n",
      "Requirement already satisfied: scipy>=1.6.0 in c:\\users\\maicol_pc\\anaconda3\\lib\\site-packages (from scikit-learn) (1.13.1)\n",
      "Requirement already satisfied: joblib>=1.2.0 in c:\\users\\maicol_pc\\anaconda3\\lib\\site-packages (from scikit-learn) (1.4.2)\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in c:\\users\\maicol_pc\\anaconda3\\lib\\site-packages (from scikit-learn) (2.2.0)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in c:\\users\\maicol_pc\\anaconda3\\lib\\site-packages (from matplotlib) (1.2.0)\n",
      "Requirement already satisfied: cycler>=0.10 in c:\\users\\maicol_pc\\anaconda3\\lib\\site-packages (from matplotlib) (0.11.0)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in c:\\users\\maicol_pc\\anaconda3\\lib\\site-packages (from matplotlib) (4.51.0)\n",
      "Requirement already satisfied: kiwisolver>=1.3.1 in c:\\users\\maicol_pc\\anaconda3\\lib\\site-packages (from matplotlib) (1.4.4)\n",
      "Requirement already satisfied: packaging>=20.0 in c:\\users\\maicol_pc\\anaconda3\\lib\\site-packages (from matplotlib) (23.2)\n",
      "Requirement already satisfied: pillow>=8 in c:\\users\\maicol_pc\\anaconda3\\lib\\site-packages (from matplotlib) (10.3.0)\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in c:\\users\\maicol_pc\\anaconda3\\lib\\site-packages (from matplotlib) (3.0.9)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\maicol_pc\\anaconda3\\lib\\site-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install numpy pandas scikit-learn matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "49ee793c-75c2-4173-9a7d-266612ec7da1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import mean_squared_error, r2_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "20bf10b7-d4f3-48d6-823a-8d72634b72e0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Cargar archivo CSV\n",
    "df = pd.read_csv('car data.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "1fd1e431-4907-4f50-aae6-fe66d91ce8ac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Car_Name</th>\n",
       "      <th>Year</th>\n",
       "      <th>Selling_Price</th>\n",
       "      <th>Present_Price</th>\n",
       "      <th>Kms_Driven</th>\n",
       "      <th>Fuel_Type</th>\n",
       "      <th>Seller_Type</th>\n",
       "      <th>Transmission</th>\n",
       "      <th>Owner</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ritz</td>\n",
       "      <td>2014</td>\n",
       "      <td>3.35</td>\n",
       "      <td>5.59</td>\n",
       "      <td>27000</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>sx4</td>\n",
       "      <td>2013</td>\n",
       "      <td>4.75</td>\n",
       "      <td>9.54</td>\n",
       "      <td>43000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ciaz</td>\n",
       "      <td>2017</td>\n",
       "      <td>7.25</td>\n",
       "      <td>9.85</td>\n",
       "      <td>6900</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>wagon r</td>\n",
       "      <td>2011</td>\n",
       "      <td>2.85</td>\n",
       "      <td>4.15</td>\n",
       "      <td>5200</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>swift</td>\n",
       "      <td>2014</td>\n",
       "      <td>4.60</td>\n",
       "      <td>6.87</td>\n",
       "      <td>42450</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>296</th>\n",
       "      <td>city</td>\n",
       "      <td>2016</td>\n",
       "      <td>9.50</td>\n",
       "      <td>11.60</td>\n",
       "      <td>33988</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>297</th>\n",
       "      <td>brio</td>\n",
       "      <td>2015</td>\n",
       "      <td>4.00</td>\n",
       "      <td>5.90</td>\n",
       "      <td>60000</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>298</th>\n",
       "      <td>city</td>\n",
       "      <td>2009</td>\n",
       "      <td>3.35</td>\n",
       "      <td>11.00</td>\n",
       "      <td>87934</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>city</td>\n",
       "      <td>2017</td>\n",
       "      <td>11.50</td>\n",
       "      <td>12.50</td>\n",
       "      <td>9000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300</th>\n",
       "      <td>brio</td>\n",
       "      <td>2016</td>\n",
       "      <td>5.30</td>\n",
       "      <td>5.90</td>\n",
       "      <td>5464</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manual</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>301 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Car_Name  Year  Selling_Price  Present_Price  Kms_Driven Fuel_Type  \\\n",
       "0       ritz  2014           3.35           5.59       27000    Petrol   \n",
       "1        sx4  2013           4.75           9.54       43000    Diesel   \n",
       "2       ciaz  2017           7.25           9.85        6900    Petrol   \n",
       "3    wagon r  2011           2.85           4.15        5200    Petrol   \n",
       "4      swift  2014           4.60           6.87       42450    Diesel   \n",
       "..       ...   ...            ...            ...         ...       ...   \n",
       "296     city  2016           9.50          11.60       33988    Diesel   \n",
       "297     brio  2015           4.00           5.90       60000    Petrol   \n",
       "298     city  2009           3.35          11.00       87934    Petrol   \n",
       "299     city  2017          11.50          12.50        9000    Diesel   \n",
       "300     brio  2016           5.30           5.90        5464    Petrol   \n",
       "\n",
       "    Seller_Type Transmission  Owner  \n",
       "0        Dealer       Manual      0  \n",
       "1        Dealer       Manual      0  \n",
       "2        Dealer       Manual      0  \n",
       "3        Dealer       Manual      0  \n",
       "4        Dealer       Manual      0  \n",
       "..          ...          ...    ...  \n",
       "296      Dealer       Manual      0  \n",
       "297      Dealer       Manual      0  \n",
       "298      Dealer       Manual      0  \n",
       "299      Dealer       Manual      0  \n",
       "300      Dealer       Manual      0  \n",
       "\n",
       "[301 rows x 9 columns]"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "8ff58f2d-cfd7-4d7f-b7c8-6526ace0fcab",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['Car_Name', 'Year', 'Selling_Price', 'Present_Price', 'Kms_Driven',\n",
      "       'Fuel_Type', 'Seller_Type', 'Transmission', 'Owner'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "# Confirmacion de columnas\n",
    "print(df.columns)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "b9cc23cf-2bc5-413e-8fdb-96661efaca2c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Year'>"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x1700 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#  exploratorio de datos\n",
    "\n",
    "# Variable \"Year\"\n",
    "plt.figure(figsize=(8, 17))\n",
    "sns.boxplot(x=df['Year'])\n",
    "plt.title('IdentificaciÃ³n de Datos AtÃ­picos', fontsize=10)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "e0f3e035-16bc-4cdb-819f-81e34cbf64eb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Kms_Driven'>"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x1700 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#  exploratorio de datos\n",
    "\n",
    "# Variable \"Kms_Driven\"\n",
    "plt.figure(figsize=(8, 17))\n",
    "sns.boxplot(x=df['Kms_Driven'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "a85e2ac7-207e-43f1-b1ba-1ad0e0ca2336",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CorrelaciÃ³n entre year e Kms_Driven: -0.5243420406957318\n"
     ]
    }
   ],
   "source": [
    "# Calcular la correlaciÃ³n entre xr e y\n",
    "correlacion =df['Year'].corr(df['Kms_Driven'])\n",
    "print(f\"CorrelaciÃ³n entre year e Kms_Driven: {correlacion}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "432b8d7e-14d8-44c1-b623-ac6c1fdc4fe3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# GrÃ¡fico de dispersiÃ³n entre Year e Kms_Driven\n",
    "plt.figure(figsize=(8,6))\n",
    "sns.scatterplot(Year='Year', Kms_Drive='Kms_Drive', df=df, color='purple')\n",
    "plt.title('RelaciÃ³n entre X e Y')\n",
    "plt.xlabel('Variable independiente Year')\n",
    "plt.ylabel('Variable dependiente Kms_Drive')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "9263e264-e86f-43b2-b8ab-2b938427adf9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total registros dataset: 301\n",
      "El total de datos atÃ­picos para la cantidad de Kms_Drive es 300\n",
      "El total de datos atÃ­picos para elPresent_Price es 212\n",
      "\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 301 entries, 0 to 300\n",
      "Data columns (total 9 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   Car_Name       301 non-null    object \n",
      " 1   Year           301 non-null    int64  \n",
      " 2   Selling_Price  301 non-null    float64\n",
      " 3   Present_Price  301 non-null    float64\n",
      " 4   Kms_Driven     301 non-null    int64  \n",
      " 5   Fuel_Type      301 non-null    object \n",
      " 6   Seller_Type    301 non-null    object \n",
      " 7   Transmission   301 non-null    object \n",
      " 8   Owner          301 non-null    int64  \n",
      "dtypes: float64(2), int64(3), object(4)\n",
      "memory usage: 21.3+ KB\n"
     ]
    }
   ],
   "source": [
    "#  datos atÃ­picos\n",
    "max_Owner = 10\n",
    "min_Owner = 2\n",
    "total_Owner = ((df['Owner'] < min_Owner) | (df['Owner'] > max_Owner)).sum()\n",
    "\n",
    "max_Present_Price\t = 20\n",
    "min_Present_Price\t= 8\n",
    "total_Present_Price\t= ((df['Present_Price'] < min_Present_Price\t) | (df['Present_Price'] > max_Present_Price)).sum()\n",
    "\n",
    "print(\"Total registros dataset: {}\".format(len(df)))\n",
    "print(\"El total de datos atÃ­picos para la cantidad de Kms_Drive es {}\".format(total_Owner))\n",
    "print(\"El total de datos atÃ­picos para elPresent_Price es {}\".format(total_Present_Price))\n",
    "print(\"\")\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "9323cf19-4129-4d35-a812-e00a0d09ba8d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Car_Name         0\n",
      "Year             0\n",
      "Selling_Price    0\n",
      "Present_Price    0\n",
      "Kms_Driven       0\n",
      "Fuel_Type        0\n",
      "Seller_Type      0\n",
      "Transmission     0\n",
      "Owner            0\n",
      "dtype: int64\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "Could not convert ['ritzsx4ciazwagon rswiftvitara brezzaciazs crossciazciazalto 800ciazciazertigadzireertigaertigaertigawagon rsx4alto k10ignissx4alto k10wagon rswiftswiftswiftalto k10ciazritzritzswiftertigadziresx4dzire800alto k10sx4balenoalto k10sx4dzireomniciazritzwagon rertigaciazfortunerfortunerinnovafortunerinnovacorolla altisetios crosscorolla altisetios gfortunercorolla altisetios crossfortunerfortunerfortuneretios livainnovafortunercorolla altiscorolla altisetios livacorolla altiscorolla altisetios livaetios crossetios gcorolla altiscorollacorolla altisfortunercorolla altisetios gdinnovainnovainnovacamryland cruisercorolla altisetios livaetios gcorolla altisinnovainnovafortunercorolla altiscorolla altisinnovacorolla altiscorolla altisfortunerRoyal Enfield Thunder 500UM Renegade MojaveKTM RC200Bajaj Dominar 400Royal Enfield Classic 350KTM RC390Hyosung GT250RRoyal Enfield Thunder 350Royal Enfield Thunder 350Royal Enfield Classic 350KTM RC200Royal Enfield Thunder 350KTM 390 Duke Mahindra Mojo XT300Royal Enfield Classic 350Royal Enfield Classic 350Royal Enfield Classic 350Royal Enfield Thunder 500Royal Enfield Classic 350Royal Enfield Thunder 500Bajaj Pulsar RS200Royal Enfield Thunder 350Royal Enfield Bullet 350Royal Enfield Classic 350Royal Enfield Classic 500Royal Enfield Classic 500Bajaj Avenger 220Bajaj Avenger 150Honda CB Hornet 160RYamaha FZ S V 2.0Honda CB Hornet 160RYamaha FZ 16Bajaj Avenger 220Bajaj Avenger 220TVS Apache RTR 160Bajaj Pulsar 150Honda CBR 150Hero ExtremeHonda CB Hornet 160RBajaj Avenger 220 dtsiHonda CBR 150Bajaj Avenger 150 streetYamaha FZ  v 2.0Yamaha FZ  v 2.0Bajaj Pulsar  NS 200TVS Apache RTR 160Hero ExtremeYamaha FZ S V 2.0Bajaj Pulsar 220 FBajaj Pulsar 220 FTVS Apache RTR 180Hero Passion X proBajaj Pulsar NS 200Bajaj Pulsar NS 200Yamaha Fazer Honda Activa 4GTVS Sport Yamaha FZ S V 2.0Honda Dream Yuga Honda Activa 4GBajaj Avenger Street 220TVS Apache RTR 180Bajaj Pulsar NS 200Bajaj Avenger 220 dtsiHero Splender iSmartActiva 3gHero Passion ProTVS Apache RTR 160Honda CB TriggerHero Splender iSmartYamaha FZ S Hero Passion ProBajaj Pulsar 135 LSActiva 4gHonda CB UnicornHero Honda CBZ extremeHonda KarizmaHonda Activa 125TVS JupyterHonda KarizmaHero Honda Passion ProHero Splender PlusHonda CB ShineBajaj Discover 100Bajaj Pulsar 150Suzuki Access 125TVS WegoHonda CB twisterHero GlamourHero Super SplendorBajaj Pulsar 150Bajaj Discover 125Hero HunkHero  Ignitor DiscHero  CBZ XtremeBajaj  ct 100Activa 3gHonda CB twisterBajaj Discover 125Honda CB ShineBajaj Pulsar 150i20grand i10i10eongrand i10xcentgrand i10i20grand i10i10elantracretai20grand i10vernaeoneonvernavernaeoni20i20vernavernai10grand i10i10vernai20vernavernaelantragrand i10grand i10vernaeoncretavernaeonvernaxcentxcenti20vernavernai20vernai10i20cretacitybriocitycitybriocitycitycityamazecitybrioamazejazzamazejazzamazecitybriocitycitycitycityjazzbriocitycitycityjazzcitybriocitycitycitybriojazzjazzamazecitycityamazebriojazzcityamazecitycitybriocitycitybrio'\n 'PetrolDieselPetrolPetrolDieselDieselPetrolDieselDieselDieselPetrolDieselPetrolPetrolPetrolDieselDieselDieselCNGPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolDieselDieselPetrolDieselDieselDieselCNGPetrolPetrolPetrolPetrolPetrolPetrolPetrolDieselPetrolPetrolPetrolPetrolPetrolPetrolDieselDieselDieselDieselPetrolPetrolPetrolPetrolPetrolDieselPetrolPetrolDieselDieselDieselDieselPetrolDieselPetrolPetrolDieselDieselPetrolPetrolDieselPetrolPetrolPetrolPetrolDieselDieselDieselDieselDieselDieselPetrolDieselPetrolPetrolPetrolPetrolDieselPetrolDieselPetrolPetrolDieselPetrolPetrolDieselPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolDieselPetrolPetrolPetrolPetrolPetrolPetrolPetrolDieselPetrolDieselPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolDieselDieselPetrolPetrolPetrolPetrolDieselDieselDieselPetrolPetrolDieselPetrolPetrolPetrolDieselPetrolPetrolDieselPetrolPetrolPetrolDieselDieselPetrolPetrolPetrolPetrolDieselPetrolPetrolDieselPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolDieselPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolDieselPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolDieselDieselPetrolPetrolDieselPetrol'\n 'DealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerIndividualDealerDealerDealerDealerDealerDealerDealerDealerDealerIndividualDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerIndividualIndividualDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerIndividualDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealer'\n 'ManualManualManualManualManualManualManualManualManualManualManualManualAutomaticManualManualManualManualManualManualManualManualManualAutomaticManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualAutomaticManualManualManualManualAutomaticManualManualManualAutomaticAutomaticAutomaticAutomaticAutomaticManualAutomaticManualManualManualAutomaticManualManualAutomaticAutomaticAutomaticManualAutomaticManualManualManualManualManualManualManualManualManualManualAutomaticAutomaticAutomaticManualManualAutomaticManualManualAutomaticManualManualManualManualManualManualManualAutomaticAutomaticManualAutomaticManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualAutomaticManualManualManualAutomaticManualManualManualManualManualAutomaticManualManualManualManualManualManualManualAutomaticManualManualManualAutomaticAutomaticManualManualManualManualManualManualAutomaticAutomaticManualManualManualManualManualManualManualManualManualAutomaticManualManualManualManualManualManualManualManualManualManualAutomaticManualManualManualManualManualManualManualManualManualManualManualManualManualAutomaticManualManualAutomaticManualManualManualManualManualManualManualAutomaticManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualAutomaticManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualAutomaticManualManualManualManualManualManualManualManualManualAutomaticManualAutomaticManualManualManualManualManualManualManualManualManualManualManualManualManual'] to numeric",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[142], line 8\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[38;5;28mprint\u001b[39m(df\u001b[38;5;241m.\u001b[39misnull()\u001b[38;5;241m.\u001b[39msum())\n\u001b[0;32m      4\u001b[0m \u001b[38;5;66;03m# Eliminar filas con valores faltantes (opcional)\u001b[39;00m\n\u001b[0;32m      5\u001b[0m \u001b[38;5;66;03m# data = data.dropna()\u001b[39;00m\n\u001b[0;32m      6\u001b[0m \n\u001b[0;32m      7\u001b[0m \u001b[38;5;66;03m# Imputar valores faltantes con la media (puedes usar la mediana o un mÃ©todo mÃ¡s sofisticado)\u001b[39;00m\n\u001b[1;32m----> 8\u001b[0m df\u001b[38;5;241m.\u001b[39mfillna(df\u001b[38;5;241m.\u001b[39mmean(), inplace\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\frame.py:11693\u001b[0m, in \u001b[0;36mDataFrame.mean\u001b[1;34m(self, axis, skipna, numeric_only, **kwargs)\u001b[0m\n\u001b[0;32m  11685\u001b[0m \u001b[38;5;129m@doc\u001b[39m(make_doc(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmean\u001b[39m\u001b[38;5;124m\"\u001b[39m, ndim\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m2\u001b[39m))\n\u001b[0;32m  11686\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mmean\u001b[39m(\n\u001b[0;32m  11687\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m  11691\u001b[0m     \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs,\n\u001b[0;32m  11692\u001b[0m ):\n\u001b[1;32m> 11693\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28msuper\u001b[39m()\u001b[38;5;241m.\u001b[39mmean(axis, skipna, numeric_only, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m  11694\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(result, Series):\n\u001b[0;32m  11695\u001b[0m         result \u001b[38;5;241m=\u001b[39m result\u001b[38;5;241m.\u001b[39m__finalize__(\u001b[38;5;28mself\u001b[39m, method\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmean\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\generic.py:12420\u001b[0m, in \u001b[0;36mNDFrame.mean\u001b[1;34m(self, axis, skipna, numeric_only, **kwargs)\u001b[0m\n\u001b[0;32m  12413\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mmean\u001b[39m(\n\u001b[0;32m  12414\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[0;32m  12415\u001b[0m     axis: Axis \u001b[38;5;241m|\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0\u001b[39m,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m  12418\u001b[0m     \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs,\n\u001b[0;32m  12419\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Series \u001b[38;5;241m|\u001b[39m \u001b[38;5;28mfloat\u001b[39m:\n\u001b[1;32m> 12420\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_stat_function(\n\u001b[0;32m  12421\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmean\u001b[39m\u001b[38;5;124m\"\u001b[39m, nanops\u001b[38;5;241m.\u001b[39mnanmean, axis, skipna, numeric_only, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs\n\u001b[0;32m  12422\u001b[0m     )\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\generic.py:12377\u001b[0m, in \u001b[0;36mNDFrame._stat_function\u001b[1;34m(self, name, func, axis, skipna, numeric_only, **kwargs)\u001b[0m\n\u001b[0;32m  12373\u001b[0m nv\u001b[38;5;241m.\u001b[39mvalidate_func(name, (), kwargs)\n\u001b[0;32m  12375\u001b[0m validate_bool_kwarg(skipna, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mskipna\u001b[39m\u001b[38;5;124m\"\u001b[39m, none_allowed\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\n\u001b[1;32m> 12377\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_reduce(\n\u001b[0;32m  12378\u001b[0m     func, name\u001b[38;5;241m=\u001b[39mname, axis\u001b[38;5;241m=\u001b[39maxis, skipna\u001b[38;5;241m=\u001b[39mskipna, numeric_only\u001b[38;5;241m=\u001b[39mnumeric_only\n\u001b[0;32m  12379\u001b[0m )\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\frame.py:11562\u001b[0m, in \u001b[0;36mDataFrame._reduce\u001b[1;34m(self, op, name, axis, skipna, numeric_only, filter_type, **kwds)\u001b[0m\n\u001b[0;32m  11558\u001b[0m     df \u001b[38;5;241m=\u001b[39m df\u001b[38;5;241m.\u001b[39mT\n\u001b[0;32m  11560\u001b[0m \u001b[38;5;66;03m# After possibly _get_data and transposing, we are now in the\u001b[39;00m\n\u001b[0;32m  11561\u001b[0m \u001b[38;5;66;03m#  simple case where we can use BlockManager.reduce\u001b[39;00m\n\u001b[1;32m> 11562\u001b[0m res \u001b[38;5;241m=\u001b[39m df\u001b[38;5;241m.\u001b[39m_mgr\u001b[38;5;241m.\u001b[39mreduce(blk_func)\n\u001b[0;32m  11563\u001b[0m out \u001b[38;5;241m=\u001b[39m df\u001b[38;5;241m.\u001b[39m_constructor_from_mgr(res, axes\u001b[38;5;241m=\u001b[39mres\u001b[38;5;241m.\u001b[39maxes)\u001b[38;5;241m.\u001b[39miloc[\u001b[38;5;241m0\u001b[39m]\n\u001b[0;32m  11564\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m out_dtype \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;129;01mand\u001b[39;00m out\u001b[38;5;241m.\u001b[39mdtype \u001b[38;5;241m!=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mboolean\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\internals\\managers.py:1500\u001b[0m, in \u001b[0;36mBlockManager.reduce\u001b[1;34m(self, func)\u001b[0m\n\u001b[0;32m   1498\u001b[0m res_blocks: \u001b[38;5;28mlist\u001b[39m[Block] \u001b[38;5;241m=\u001b[39m []\n\u001b[0;32m   1499\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m blk \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mblocks:\n\u001b[1;32m-> 1500\u001b[0m     nbs \u001b[38;5;241m=\u001b[39m blk\u001b[38;5;241m.\u001b[39mreduce(func)\n\u001b[0;32m   1501\u001b[0m     res_blocks\u001b[38;5;241m.\u001b[39mextend(nbs)\n\u001b[0;32m   1503\u001b[0m index \u001b[38;5;241m=\u001b[39m Index([\u001b[38;5;28;01mNone\u001b[39;00m])  \u001b[38;5;66;03m# placeholder\u001b[39;00m\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py:404\u001b[0m, in \u001b[0;36mBlock.reduce\u001b[1;34m(self, func)\u001b[0m\n\u001b[0;32m    398\u001b[0m \u001b[38;5;129m@final\u001b[39m\n\u001b[0;32m    399\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mreduce\u001b[39m(\u001b[38;5;28mself\u001b[39m, func) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28mlist\u001b[39m[Block]:\n\u001b[0;32m    400\u001b[0m     \u001b[38;5;66;03m# We will apply the function and reshape the result into a single-row\u001b[39;00m\n\u001b[0;32m    401\u001b[0m     \u001b[38;5;66;03m#  Block with the same mgr_locs; squeezing will be done at a higher level\u001b[39;00m\n\u001b[0;32m    402\u001b[0m     \u001b[38;5;28;01massert\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mndim \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m2\u001b[39m\n\u001b[1;32m--> 404\u001b[0m     result \u001b[38;5;241m=\u001b[39m func(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mvalues)\n\u001b[0;32m    406\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mvalues\u001b[38;5;241m.\u001b[39mndim \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m    407\u001b[0m         res_values \u001b[38;5;241m=\u001b[39m result\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\frame.py:11481\u001b[0m, in \u001b[0;36mDataFrame._reduce.<locals>.blk_func\u001b[1;34m(values, axis)\u001b[0m\n\u001b[0;32m  11479\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m np\u001b[38;5;241m.\u001b[39marray([result])\n\u001b[0;32m  11480\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m> 11481\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m op(values, axis\u001b[38;5;241m=\u001b[39maxis, skipna\u001b[38;5;241m=\u001b[39mskipna, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\nanops.py:147\u001b[0m, in \u001b[0;36mbottleneck_switch.__call__.<locals>.f\u001b[1;34m(values, axis, skipna, **kwds)\u001b[0m\n\u001b[0;32m    145\u001b[0m         result \u001b[38;5;241m=\u001b[39m alt(values, axis\u001b[38;5;241m=\u001b[39maxis, skipna\u001b[38;5;241m=\u001b[39mskipna, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n\u001b[0;32m    146\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 147\u001b[0m     result \u001b[38;5;241m=\u001b[39m alt(values, axis\u001b[38;5;241m=\u001b[39maxis, skipna\u001b[38;5;241m=\u001b[39mskipna, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n\u001b[0;32m    149\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m result\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\nanops.py:404\u001b[0m, in \u001b[0;36m_datetimelike_compat.<locals>.new_func\u001b[1;34m(values, axis, skipna, mask, **kwargs)\u001b[0m\n\u001b[0;32m    401\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m datetimelike \u001b[38;5;129;01mand\u001b[39;00m mask \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m    402\u001b[0m     mask \u001b[38;5;241m=\u001b[39m isna(values)\n\u001b[1;32m--> 404\u001b[0m result \u001b[38;5;241m=\u001b[39m func(values, axis\u001b[38;5;241m=\u001b[39maxis, skipna\u001b[38;5;241m=\u001b[39mskipna, mask\u001b[38;5;241m=\u001b[39mmask, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m    406\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m datetimelike:\n\u001b[0;32m    407\u001b[0m     result \u001b[38;5;241m=\u001b[39m _wrap_results(result, orig_values\u001b[38;5;241m.\u001b[39mdtype, fill_value\u001b[38;5;241m=\u001b[39miNaT)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\nanops.py:720\u001b[0m, in \u001b[0;36mnanmean\u001b[1;34m(values, axis, skipna, mask)\u001b[0m\n\u001b[0;32m    718\u001b[0m count \u001b[38;5;241m=\u001b[39m _get_counts(values\u001b[38;5;241m.\u001b[39mshape, mask, axis, dtype\u001b[38;5;241m=\u001b[39mdtype_count)\n\u001b[0;32m    719\u001b[0m the_sum \u001b[38;5;241m=\u001b[39m values\u001b[38;5;241m.\u001b[39msum(axis, dtype\u001b[38;5;241m=\u001b[39mdtype_sum)\n\u001b[1;32m--> 720\u001b[0m the_sum \u001b[38;5;241m=\u001b[39m _ensure_numeric(the_sum)\n\u001b[0;32m    722\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m axis \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mgetattr\u001b[39m(the_sum, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mndim\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mFalse\u001b[39;00m):\n\u001b[0;32m    723\u001b[0m     count \u001b[38;5;241m=\u001b[39m cast(np\u001b[38;5;241m.\u001b[39mndarray, count)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\nanops.py:1686\u001b[0m, in \u001b[0;36m_ensure_numeric\u001b[1;34m(x)\u001b[0m\n\u001b[0;32m   1683\u001b[0m inferred \u001b[38;5;241m=\u001b[39m lib\u001b[38;5;241m.\u001b[39minfer_dtype(x)\n\u001b[0;32m   1684\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m inferred \u001b[38;5;129;01min\u001b[39;00m [\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mstring\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmixed\u001b[39m\u001b[38;5;124m\"\u001b[39m]:\n\u001b[0;32m   1685\u001b[0m     \u001b[38;5;66;03m# GH#44008, GH#36703 avoid casting e.g. strings to numeric\u001b[39;00m\n\u001b[1;32m-> 1686\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCould not convert \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mx\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m to numeric\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m   1687\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m   1688\u001b[0m     x \u001b[38;5;241m=\u001b[39m x\u001b[38;5;241m.\u001b[39mastype(np\u001b[38;5;241m.\u001b[39mcomplex128)\n",
      "\u001b[1;31mTypeError\u001b[0m: Could not convert ['ritzsx4ciazwagon rswiftvitara brezzaciazs crossciazciazalto 800ciazciazertigadzireertigaertigaertigawagon rsx4alto k10ignissx4alto k10wagon rswiftswiftswiftalto k10ciazritzritzswiftertigadziresx4dzire800alto k10sx4balenoalto k10sx4dzireomniciazritzwagon rertigaciazfortunerfortunerinnovafortunerinnovacorolla altisetios crosscorolla altisetios gfortunercorolla altisetios crossfortunerfortunerfortuneretios livainnovafortunercorolla altiscorolla altisetios livacorolla altiscorolla altisetios livaetios crossetios gcorolla altiscorollacorolla altisfortunercorolla altisetios gdinnovainnovainnovacamryland cruisercorolla altisetios livaetios gcorolla altisinnovainnovafortunercorolla altiscorolla altisinnovacorolla altiscorolla altisfortunerRoyal Enfield Thunder 500UM Renegade MojaveKTM RC200Bajaj Dominar 400Royal Enfield Classic 350KTM RC390Hyosung GT250RRoyal Enfield Thunder 350Royal Enfield Thunder 350Royal Enfield Classic 350KTM RC200Royal Enfield Thunder 350KTM 390 Duke Mahindra Mojo XT300Royal Enfield Classic 350Royal Enfield Classic 350Royal Enfield Classic 350Royal Enfield Thunder 500Royal Enfield Classic 350Royal Enfield Thunder 500Bajaj Pulsar RS200Royal Enfield Thunder 350Royal Enfield Bullet 350Royal Enfield Classic 350Royal Enfield Classic 500Royal Enfield Classic 500Bajaj Avenger 220Bajaj Avenger 150Honda CB Hornet 160RYamaha FZ S V 2.0Honda CB Hornet 160RYamaha FZ 16Bajaj Avenger 220Bajaj Avenger 220TVS Apache RTR 160Bajaj Pulsar 150Honda CBR 150Hero ExtremeHonda CB Hornet 160RBajaj Avenger 220 dtsiHonda CBR 150Bajaj Avenger 150 streetYamaha FZ  v 2.0Yamaha FZ  v 2.0Bajaj Pulsar  NS 200TVS Apache RTR 160Hero ExtremeYamaha FZ S V 2.0Bajaj Pulsar 220 FBajaj Pulsar 220 FTVS Apache RTR 180Hero Passion X proBajaj Pulsar NS 200Bajaj Pulsar NS 200Yamaha Fazer Honda Activa 4GTVS Sport Yamaha FZ S V 2.0Honda Dream Yuga Honda Activa 4GBajaj Avenger Street 220TVS Apache RTR 180Bajaj Pulsar NS 200Bajaj Avenger 220 dtsiHero Splender iSmartActiva 3gHero Passion ProTVS Apache RTR 160Honda CB TriggerHero Splender iSmartYamaha FZ S Hero Passion ProBajaj Pulsar 135 LSActiva 4gHonda CB UnicornHero Honda CBZ extremeHonda KarizmaHonda Activa 125TVS JupyterHonda KarizmaHero Honda Passion ProHero Splender PlusHonda CB ShineBajaj Discover 100Bajaj Pulsar 150Suzuki Access 125TVS WegoHonda CB twisterHero GlamourHero Super SplendorBajaj Pulsar 150Bajaj Discover 125Hero HunkHero  Ignitor DiscHero  CBZ XtremeBajaj  ct 100Activa 3gHonda CB twisterBajaj Discover 125Honda CB ShineBajaj Pulsar 150i20grand i10i10eongrand i10xcentgrand i10i20grand i10i10elantracretai20grand i10vernaeoneonvernavernaeoni20i20vernavernai10grand i10i10vernai20vernavernaelantragrand i10grand i10vernaeoncretavernaeonvernaxcentxcenti20vernavernai20vernai10i20cretacitybriocitycitybriocitycitycityamazecitybrioamazejazzamazejazzamazecitybriocitycitycitycityjazzbriocitycitycityjazzcitybriocitycitycitybriojazzjazzamazecitycityamazebriojazzcityamazecitycitybriocitycitybrio'\n 'PetrolDieselPetrolPetrolDieselDieselPetrolDieselDieselDieselPetrolDieselPetrolPetrolPetrolDieselDieselDieselCNGPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolDieselDieselPetrolDieselDieselDieselCNGPetrolPetrolPetrolPetrolPetrolPetrolPetrolDieselPetrolPetrolPetrolPetrolPetrolPetrolDieselDieselDieselDieselPetrolPetrolPetrolPetrolPetrolDieselPetrolPetrolDieselDieselDieselDieselPetrolDieselPetrolPetrolDieselDieselPetrolPetrolDieselPetrolPetrolPetrolPetrolDieselDieselDieselDieselDieselDieselPetrolDieselPetrolPetrolPetrolPetrolDieselPetrolDieselPetrolPetrolDieselPetrolPetrolDieselPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolDieselPetrolPetrolPetrolPetrolPetrolPetrolPetrolDieselPetrolDieselPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolDieselDieselPetrolPetrolPetrolPetrolDieselDieselDieselPetrolPetrolDieselPetrolPetrolPetrolDieselPetrolPetrolDieselPetrolPetrolPetrolDieselDieselPetrolPetrolPetrolPetrolDieselPetrolPetrolDieselPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolDieselPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolDieselPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolPetrolDieselDieselPetrolPetrolDieselPetrol'\n 'DealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerIndividualDealerDealerDealerDealerDealerDealerDealerDealerDealerIndividualDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerIndividualIndividualDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerIndividualDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualIndividualDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealerDealer'\n 'ManualManualManualManualManualManualManualManualManualManualManualManualAutomaticManualManualManualManualManualManualManualManualManualAutomaticManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualAutomaticManualManualManualManualAutomaticManualManualManualAutomaticAutomaticAutomaticAutomaticAutomaticManualAutomaticManualManualManualAutomaticManualManualAutomaticAutomaticAutomaticManualAutomaticManualManualManualManualManualManualManualManualManualManualAutomaticAutomaticAutomaticManualManualAutomaticManualManualAutomaticManualManualManualManualManualManualManualAutomaticAutomaticManualAutomaticManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualAutomaticManualManualManualAutomaticManualManualManualManualManualAutomaticManualManualManualManualManualManualManualAutomaticManualManualManualAutomaticAutomaticManualManualManualManualManualManualAutomaticAutomaticManualManualManualManualManualManualManualManualManualAutomaticManualManualManualManualManualManualManualManualManualManualAutomaticManualManualManualManualManualManualManualManualManualManualManualManualManualAutomaticManualManualAutomaticManualManualManualManualManualManualManualAutomaticManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualAutomaticManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualManualAutomaticManualManualManualManualManualManualManualManualManualAutomaticManualAutomaticManualManualManualManualManualManualManualManualManualManualManualManualManual'] to numeric"
     ]
    }
   ],
   "source": [
    "# Verificar valores faltantes\n",
    "print(df.isnull().sum())\n",
    "\n",
    "# Eliminar filas con valores faltantes (opcional)\n",
    "# data = data.dropna()\n",
    "\n",
    "# Imputar valores faltantes con la media (puedes usar la mediana o un mÃ©todo mÃ¡s sofisticado)\n",
    "df.fillna(df.mean(), inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "0b5ca3ba-c0f0-4dfe-a005-16f7b0118ce3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# modelo\n",
    "df_numerica = df.copy()\n",
    "for column in df_numerica.columns:\n",
    "    if df_numerica[column].dtype == 'object':\n",
    "        label_encoder = LabelEncoder()\n",
    "        df_numerica[column] = label_encoder.fit_transform(df_numerica[column])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "58d0f58e-883a-4e0a-9f47-66235df85766",
   "metadata": {
    "jupyter": {
     "source_hidden": true
    }
   },
   "outputs": [],
   "source": [
    "# Dividir los datos en conjunto de entrenamiento y prueba\n",
    "X = df_numerica.drop('Present_Price', axis=1)\n",
    "Y = df_numerica['Car_Name']\n",
    "\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25, random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "7d9aca22-7051-423c-b470-9a6a57b498f5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Car_Name</th>\n",
       "      <th>Year</th>\n",
       "      <th>Selling_Price</th>\n",
       "      <th>Kms_Driven</th>\n",
       "      <th>Fuel_Type</th>\n",
       "      <th>Seller_Type</th>\n",
       "      <th>Transmission</th>\n",
       "      <th>Owner</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>223</th>\n",
       "      <td>94</td>\n",
       "      <td>2015</td>\n",
       "      <td>8.25</td>\n",
       "      <td>61381</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150</th>\n",
       "      <td>52</td>\n",
       "      <td>2011</td>\n",
       "      <td>0.50</td>\n",
       "      <td>6000</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Car_Name  Year  Selling_Price  Kms_Driven  Fuel_Type  Seller_Type  \\\n",
       "223        94  2015           8.25       61381          1            0   \n",
       "150        52  2011           0.50        6000          2            1   \n",
       "\n",
       "     Transmission  Owner  \n",
       "223             1      0  \n",
       "150             1      0  "
      ]
     },
     "execution_count": 157,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#test\n",
    "X_test.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "38a694b1-6e4b-4d28-8f4c-8dddc3750c0b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Car_Name</th>\n",
       "      <th>Year</th>\n",
       "      <th>Selling_Price</th>\n",
       "      <th>Kms_Driven</th>\n",
       "      <th>Fuel_Type</th>\n",
       "      <th>Seller_Type</th>\n",
       "      <th>Transmission</th>\n",
       "      <th>Owner</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>20</td>\n",
       "      <td>2014</td>\n",
       "      <td>0.55</td>\n",
       "      <td>15000</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>260</th>\n",
       "      <td>69</td>\n",
       "      <td>2016</td>\n",
       "      <td>9.15</td>\n",
       "      <td>29223</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Car_Name  Year  Selling_Price  Kms_Driven  Fuel_Type  Seller_Type  \\\n",
       "146        20  2014           0.55       15000          2            1   \n",
       "260        69  2016           9.15       29223          2            0   \n",
       "\n",
       "     Transmission  Owner  \n",
       "146             1      0  \n",
       "260             1      0  "
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#train\n",
    "X_train.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "fd0dc902-09dc-43fa-84b7-4841f1f5499e",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import Ridge\n",
    "\n",
    "# Definir el modelo\n",
    "modelo = Ridge()\n",
    "\n",
    "# Definir la cuadrÃ­cula de hiperparÃ¡metros\n",
    "parametros = {\n",
    "    'alpha': [0.1, 1.0, 10.0, 100.0],  # ParÃ¡metro de regularizaciÃ³n\n",
    "    'fit_intercept': [True, False]  # Ajustar la intersecciÃ³n\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "id": "0922dc36-39cc-449f-b5e4-58ad3d25e3b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-2 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-2 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"â–¸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"â–¾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-2 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-2 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-2 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;LinearRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 173,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " # entrenar el modelo de regresiÃ³n lineal\n",
    "modelo_regresion = LinearRegression()\n",
    "modelo_regresion.fit(X_train, Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "id": "f1f9faa0-cb59-4bd8-b965-a5c59edd4427",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Coeficientes: [ 1.00000000e+00  5.47383279e-17  2.59099482e-17 -1.54052199e-15\n",
      "  3.29803415e-16  6.06141306e-16 -2.44258574e-16 -6.59534690e-16]\n",
      "Error cuadrÃ¡tico medio: 2.1294689823510748e-21\n",
      "Coeficiente de determinaciÃ³n (R^2): 1.0\n"
     ]
    }
   ],
   "source": [
    "# Evaluar el modelo\n",
    "print('Coeficientes:', modelo_regresion.coef_)\n",
    "print('Error cuadrÃ¡tico medio:', mean_squared_error(Y_test, Prediccion))\n",
    "print('Coeficiente de determinaciÃ³n (R^2):', r2_score(Y_test, Prediccion))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "id": "ea47efb9-0857-49cb-9f9b-9c904df148dd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# gr del modelo\n",
    "plt.scatter(Y_test, Prediccion)\n",
    "plt.xlabel(\"Present_Price\")\n",
    "plt.ylabel(\"Predicciones\")\n",
    "plt.title(\"Rendimiento del modelo de regresiÃ³n lineal\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "id": "2f63c77c-0baa-4657-ba9f-8e840b76ab30",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calcular residuos\n",
    "residuos = Y_test - Y_train\n",
    "\n",
    "# GrÃ¡fico de residuos\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.scatterplot(x=Y_train, y=residuos, color='blue', alpha=0.5)\n",
    "plt.axhline(0, color='red', linestyle='--')\n",
    "plt.title('GrÃ¡fico de Residuos')\n",
    "plt.xlabel('Predicciones')\n",
    "plt.ylabel('Residuos')\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "id": "ffcb6c00-6a8d-44a5-891b-418ba9b93e71",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calcular residuos\n",
    "residuos = Y_test - Y_train\n",
    "\n",
    "# GrÃ¡fico de residuos\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.scatterplot(x=Y_train, y=residuos, color='blue', alpha=0.5)\n",
    "plt.axhline(0, color='red', linestyle='--')\n",
    "plt.title('GrÃ¡fico de Residuos')\n",
    "plt.xlabel('Predicciones')\n",
    "plt.ylabel('Residuos')\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0e939e5c-88bf-45b9-8b8d-c433517fe1ea",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b81876c2-836c-461e-9f09-1f4f14ab1951",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
